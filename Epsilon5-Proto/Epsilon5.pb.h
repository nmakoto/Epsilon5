// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Epsilon5.proto

#ifndef PROTOBUF_Epsilon5_2eproto__INCLUDED
#define PROTOBUF_Epsilon5_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace Epsilon5 {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Epsilon5_2eproto();
void protobuf_AssignDesc_Epsilon5_2eproto();
void protobuf_ShutdownFile_Epsilon5_2eproto();

class Player;
class Bullet;
class Object;
class RespPoint;
class PlayerStat;
class PlayerInfo;
class World;
class Control;
class Control_KeyStatus;
class Auth;

enum Bullet_Type {
  Bullet_Type_ARBUZ = 0,
  Bullet_Type_LITTLE_BULLET = 1,
  Bullet_Type_ROCKET = 2
};
bool Bullet_Type_IsValid(int value);
const Bullet_Type Bullet_Type_Type_MIN = Bullet_Type_ARBUZ;
const Bullet_Type Bullet_Type_Type_MAX = Bullet_Type_ROCKET;
const int Bullet_Type_Type_ARRAYSIZE = Bullet_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Bullet_Type_descriptor();
inline const ::std::string& Bullet_Type_Name(Bullet_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Bullet_Type_descriptor(), value);
}
inline bool Bullet_Type_Parse(
    const ::std::string& name, Bullet_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Bullet_Type>(
    Bullet_Type_descriptor(), name, value);
}
enum Weapon {
  Pistol = 0,
  Machinegun = 1,
  Shotgun = 2
};
bool Weapon_IsValid(int value);
const Weapon Weapon_MIN = Pistol;
const Weapon Weapon_MAX = Shotgun;
const int Weapon_ARRAYSIZE = Weapon_MAX + 1;

const ::google::protobuf::EnumDescriptor* Weapon_descriptor();
inline const ::std::string& Weapon_Name(Weapon value) {
  return ::google::protobuf::internal::NameOfEnum(
    Weapon_descriptor(), value);
}
inline bool Weapon_Parse(
    const ::std::string& name, Weapon* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Weapon>(
    Weapon_descriptor(), name, value);
}
// ===================================================================

class Player : public ::google::protobuf::Message {
 public:
  Player();
  virtual ~Player();
  
  Player(const Player& from);
  
  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Player& default_instance();
  
  void Swap(Player* other);
  
  // implements Message ----------------------------------------------
  
  Player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required int32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);
  
  // required int32 y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);
  
  // optional double vx = 4;
  inline bool has_vx() const;
  inline void clear_vx();
  static const int kVxFieldNumber = 4;
  inline double vx() const;
  inline void set_vx(double value);
  
  // optional double vy = 5;
  inline bool has_vy() const;
  inline void clear_vy();
  static const int kVyFieldNumber = 5;
  inline double vy() const;
  inline void set_vy(double value);
  
  // optional double angle = 6;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 6;
  inline double angle() const;
  inline void set_angle(double value);
  
  // optional string name = 7;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 7;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional uint32 hp = 8;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 8;
  inline ::google::protobuf::uint32 hp() const;
  inline void set_hp(::google::protobuf::uint32 value);
  
  // required bool team = 9;
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 9;
  inline bool team() const;
  inline void set_team(bool value);
  
  // optional uint32 ping = 10;
  inline bool has_ping() const;
  inline void clear_ping();
  static const int kPingFieldNumber = 10;
  inline ::google::protobuf::uint32 ping() const;
  inline void set_ping(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:Epsilon5.Player)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_vx();
  inline void clear_has_vx();
  inline void set_has_vy();
  inline void clear_has_vy();
  inline void set_has_angle();
  inline void clear_has_angle();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_team();
  inline void clear_has_team();
  inline void set_has_ping();
  inline void clear_has_ping();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 x_;
  double vx_;
  double vy_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::uint32 hp_;
  double angle_;
  ::std::string* name_;
  bool team_;
  ::google::protobuf::uint32 ping_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_Epsilon5_2eproto();
  friend void protobuf_AssignDesc_Epsilon5_2eproto();
  friend void protobuf_ShutdownFile_Epsilon5_2eproto();
  
  void InitAsDefaultInstance();
  static Player* default_instance_;
};
// -------------------------------------------------------------------

class Bullet : public ::google::protobuf::Message {
 public:
  Bullet();
  virtual ~Bullet();
  
  Bullet(const Bullet& from);
  
  inline Bullet& operator=(const Bullet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Bullet& default_instance();
  
  void Swap(Bullet* other);
  
  // implements Message ----------------------------------------------
  
  Bullet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Bullet& from);
  void MergeFrom(const Bullet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Bullet_Type Type;
  static const Type ARBUZ = Bullet_Type_ARBUZ;
  static const Type LITTLE_BULLET = Bullet_Type_LITTLE_BULLET;
  static const Type ROCKET = Bullet_Type_ROCKET;
  static inline bool Type_IsValid(int value) {
    return Bullet_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Bullet_Type_Type_MIN;
  static const Type Type_MAX =
    Bullet_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Bullet_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Bullet_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Bullet_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Bullet_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);
  
  // required int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);
  
  // optional double vx = 3;
  inline bool has_vx() const;
  inline void clear_vx();
  static const int kVxFieldNumber = 3;
  inline double vx() const;
  inline void set_vx(double value);
  
  // optional double vy = 4;
  inline bool has_vy() const;
  inline void clear_vy();
  static const int kVyFieldNumber = 4;
  inline double vy() const;
  inline void set_vy(double value);
  
  // optional .Epsilon5.Bullet.Type bullet_type = 5 [default = ARBUZ];
  inline bool has_bullet_type() const;
  inline void clear_bullet_type();
  static const int kBulletTypeFieldNumber = 5;
  inline ::Epsilon5::Bullet_Type bullet_type() const;
  inline void set_bullet_type(::Epsilon5::Bullet_Type value);
  
  // required bool team = 6;
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 6;
  inline bool team() const;
  inline void set_team(bool value);
  
  // @@protoc_insertion_point(class_scope:Epsilon5.Bullet)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_vx();
  inline void clear_has_vx();
  inline void set_has_vy();
  inline void clear_has_vy();
  inline void set_has_bullet_type();
  inline void clear_has_bullet_type();
  inline void set_has_team();
  inline void clear_has_team();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  double vx_;
  double vy_;
  int bullet_type_;
  bool team_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_Epsilon5_2eproto();
  friend void protobuf_AssignDesc_Epsilon5_2eproto();
  friend void protobuf_ShutdownFile_Epsilon5_2eproto();
  
  void InitAsDefaultInstance();
  static Bullet* default_instance_;
};
// -------------------------------------------------------------------

class Object : public ::google::protobuf::Message {
 public:
  Object();
  virtual ~Object();
  
  Object(const Object& from);
  
  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Object& default_instance();
  
  void Swap(Object* other);
  
  // implements Message ----------------------------------------------
  
  Object* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // optional int32 resource_id = 2;
  inline bool has_resource_id() const;
  inline void clear_resource_id();
  static const int kResourceIdFieldNumber = 2;
  inline ::google::protobuf::int32 resource_id() const;
  inline void set_resource_id(::google::protobuf::int32 value);
  
  // optional int32 x = 3;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 3;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);
  
  // optional int32 y = 4;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 4;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);
  
  // optional double angle = 5;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 5;
  inline double angle() const;
  inline void set_angle(double value);
  
  // @@protoc_insertion_point(class_scope:Epsilon5.Object)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_resource_id();
  inline void clear_has_resource_id();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_angle();
  inline void clear_has_angle();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 resource_id_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  double angle_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_Epsilon5_2eproto();
  friend void protobuf_AssignDesc_Epsilon5_2eproto();
  friend void protobuf_ShutdownFile_Epsilon5_2eproto();
  
  void InitAsDefaultInstance();
  static Object* default_instance_;
};
// -------------------------------------------------------------------

class RespPoint : public ::google::protobuf::Message {
 public:
  RespPoint();
  virtual ~RespPoint();
  
  RespPoint(const RespPoint& from);
  
  inline RespPoint& operator=(const RespPoint& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RespPoint& default_instance();
  
  void Swap(RespPoint* other);
  
  // implements Message ----------------------------------------------
  
  RespPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RespPoint& from);
  void MergeFrom(const RespPoint& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required int32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);
  
  // required int32 y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);
  
  // required int32 team = 4;
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 4;
  inline ::google::protobuf::int32 team() const;
  inline void set_team(::google::protobuf::int32 value);
  
  // required bool is_main = 5;
  inline bool has_is_main() const;
  inline void clear_is_main();
  static const int kIsMainFieldNumber = 5;
  inline bool is_main() const;
  inline void set_is_main(bool value);
  
  // @@protoc_insertion_point(class_scope:Epsilon5.RespPoint)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_team();
  inline void clear_has_team();
  inline void set_has_is_main();
  inline void clear_has_is_main();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 team_;
  bool is_main_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_Epsilon5_2eproto();
  friend void protobuf_AssignDesc_Epsilon5_2eproto();
  friend void protobuf_ShutdownFile_Epsilon5_2eproto();
  
  void InitAsDefaultInstance();
  static RespPoint* default_instance_;
};
// -------------------------------------------------------------------

class PlayerStat : public ::google::protobuf::Message {
 public:
  PlayerStat();
  virtual ~PlayerStat();
  
  PlayerStat(const PlayerStat& from);
  
  inline PlayerStat& operator=(const PlayerStat& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerStat& default_instance();
  
  void Swap(PlayerStat* other);
  
  // implements Message ----------------------------------------------
  
  PlayerStat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerStat& from);
  void MergeFrom(const PlayerStat& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required int32 score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);
  
  // required int32 kills = 3;
  inline bool has_kills() const;
  inline void clear_kills();
  static const int kKillsFieldNumber = 3;
  inline ::google::protobuf::int32 kills() const;
  inline void set_kills(::google::protobuf::int32 value);
  
  // required int32 deaths = 4;
  inline bool has_deaths() const;
  inline void clear_deaths();
  static const int kDeathsFieldNumber = 4;
  inline ::google::protobuf::int32 deaths() const;
  inline void set_deaths(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Epsilon5.PlayerStat)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_kills();
  inline void clear_has_kills();
  inline void set_has_deaths();
  inline void clear_has_deaths();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 kills_;
  ::google::protobuf::int32 deaths_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Epsilon5_2eproto();
  friend void protobuf_AssignDesc_Epsilon5_2eproto();
  friend void protobuf_ShutdownFile_Epsilon5_2eproto();
  
  void InitAsDefaultInstance();
  static PlayerStat* default_instance_;
};
// -------------------------------------------------------------------

class PlayerInfo : public ::google::protobuf::Message {
 public:
  PlayerInfo();
  virtual ~PlayerInfo();
  
  PlayerInfo(const PlayerInfo& from);
  
  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerInfo& default_instance();
  
  void Swap(PlayerInfo* other);
  
  // implements Message ----------------------------------------------
  
  PlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerInfo& from);
  void MergeFrom(const PlayerInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string map = 2;
  inline bool has_map() const;
  inline void clear_map();
  static const int kMapFieldNumber = 2;
  inline const ::std::string& map() const;
  inline void set_map(const ::std::string& value);
  inline void set_map(const char* value);
  inline void set_map(const char* value, size_t size);
  inline ::std::string* mutable_map();
  inline ::std::string* release_map();
  
  // optional int32 weapon = 3;
  inline bool has_weapon() const;
  inline void clear_weapon();
  static const int kWeaponFieldNumber = 3;
  inline ::google::protobuf::int32 weapon() const;
  inline void set_weapon(::google::protobuf::int32 value);
  
  // optional int32 bullets = 4;
  inline bool has_bullets() const;
  inline void clear_bullets();
  static const int kBulletsFieldNumber = 4;
  inline ::google::protobuf::int32 bullets() const;
  inline void set_bullets(::google::protobuf::int32 value);
  
  // optional int32 cage = 5;
  inline bool has_cage() const;
  inline void clear_cage();
  static const int kCageFieldNumber = 5;
  inline ::google::protobuf::int32 cage() const;
  inline void set_cage(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Epsilon5.PlayerInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_map();
  inline void clear_has_map();
  inline void set_has_weapon();
  inline void clear_has_weapon();
  inline void set_has_bullets();
  inline void clear_has_bullets();
  inline void set_has_cage();
  inline void clear_has_cage();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* map_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 weapon_;
  ::google::protobuf::int32 bullets_;
  ::google::protobuf::int32 cage_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_Epsilon5_2eproto();
  friend void protobuf_AssignDesc_Epsilon5_2eproto();
  friend void protobuf_ShutdownFile_Epsilon5_2eproto();
  
  void InitAsDefaultInstance();
  static PlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class World : public ::google::protobuf::Message {
 public:
  World();
  virtual ~World();
  
  World(const World& from);
  
  inline World& operator=(const World& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const World& default_instance();
  
  void Swap(World* other);
  
  // implements Message ----------------------------------------------
  
  World* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const World& from);
  void MergeFrom(const World& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Epsilon5.Player players = 1;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 1;
  inline const ::Epsilon5::Player& players(int index) const;
  inline ::Epsilon5::Player* mutable_players(int index);
  inline ::Epsilon5::Player* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::Epsilon5::Player >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::Epsilon5::Player >*
      mutable_players();
  
  // repeated .Epsilon5.Bullet bullets = 2;
  inline int bullets_size() const;
  inline void clear_bullets();
  static const int kBulletsFieldNumber = 2;
  inline const ::Epsilon5::Bullet& bullets(int index) const;
  inline ::Epsilon5::Bullet* mutable_bullets(int index);
  inline ::Epsilon5::Bullet* add_bullets();
  inline const ::google::protobuf::RepeatedPtrField< ::Epsilon5::Bullet >&
      bullets() const;
  inline ::google::protobuf::RepeatedPtrField< ::Epsilon5::Bullet >*
      mutable_bullets();
  
  // repeated .Epsilon5.Object objects = 3;
  inline int objects_size() const;
  inline void clear_objects();
  static const int kObjectsFieldNumber = 3;
  inline const ::Epsilon5::Object& objects(int index) const;
  inline ::Epsilon5::Object* mutable_objects(int index);
  inline ::Epsilon5::Object* add_objects();
  inline const ::google::protobuf::RepeatedPtrField< ::Epsilon5::Object >&
      objects() const;
  inline ::google::protobuf::RepeatedPtrField< ::Epsilon5::Object >*
      mutable_objects();
  
  // repeated .Epsilon5.RespPoint resp_points = 4;
  inline int resp_points_size() const;
  inline void clear_resp_points();
  static const int kRespPointsFieldNumber = 4;
  inline const ::Epsilon5::RespPoint& resp_points(int index) const;
  inline ::Epsilon5::RespPoint* mutable_resp_points(int index);
  inline ::Epsilon5::RespPoint* add_resp_points();
  inline const ::google::protobuf::RepeatedPtrField< ::Epsilon5::RespPoint >&
      resp_points() const;
  inline ::google::protobuf::RepeatedPtrField< ::Epsilon5::RespPoint >*
      mutable_resp_points();
  
  // required uint32 packet_number = 5;
  inline bool has_packet_number() const;
  inline void clear_packet_number();
  static const int kPacketNumberFieldNumber = 5;
  inline ::google::protobuf::uint32 packet_number() const;
  inline void set_packet_number(::google::protobuf::uint32 value);
  
  // repeated .Epsilon5.PlayerStat players_stat = 6;
  inline int players_stat_size() const;
  inline void clear_players_stat();
  static const int kPlayersStatFieldNumber = 6;
  inline const ::Epsilon5::PlayerStat& players_stat(int index) const;
  inline ::Epsilon5::PlayerStat* mutable_players_stat(int index);
  inline ::Epsilon5::PlayerStat* add_players_stat();
  inline const ::google::protobuf::RepeatedPtrField< ::Epsilon5::PlayerStat >&
      players_stat() const;
  inline ::google::protobuf::RepeatedPtrField< ::Epsilon5::PlayerStat >*
      mutable_players_stat();
  
  // optional .Epsilon5.PlayerInfo player_info = 7;
  inline bool has_player_info() const;
  inline void clear_player_info();
  static const int kPlayerInfoFieldNumber = 7;
  inline const ::Epsilon5::PlayerInfo& player_info() const;
  inline ::Epsilon5::PlayerInfo* mutable_player_info();
  inline ::Epsilon5::PlayerInfo* release_player_info();
  
  // @@protoc_insertion_point(class_scope:Epsilon5.World)
 private:
  inline void set_has_packet_number();
  inline void clear_has_packet_number();
  inline void set_has_player_info();
  inline void clear_has_player_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Epsilon5::Player > players_;
  ::google::protobuf::RepeatedPtrField< ::Epsilon5::Bullet > bullets_;
  ::google::protobuf::RepeatedPtrField< ::Epsilon5::Object > objects_;
  ::google::protobuf::RepeatedPtrField< ::Epsilon5::RespPoint > resp_points_;
  ::google::protobuf::RepeatedPtrField< ::Epsilon5::PlayerStat > players_stat_;
  ::Epsilon5::PlayerInfo* player_info_;
  ::google::protobuf::uint32 packet_number_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_Epsilon5_2eproto();
  friend void protobuf_AssignDesc_Epsilon5_2eproto();
  friend void protobuf_ShutdownFile_Epsilon5_2eproto();
  
  void InitAsDefaultInstance();
  static World* default_instance_;
};
// -------------------------------------------------------------------

class Control_KeyStatus : public ::google::protobuf::Message {
 public:
  Control_KeyStatus();
  virtual ~Control_KeyStatus();
  
  Control_KeyStatus(const Control_KeyStatus& from);
  
  inline Control_KeyStatus& operator=(const Control_KeyStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Control_KeyStatus& default_instance();
  
  void Swap(Control_KeyStatus* other);
  
  // implements Message ----------------------------------------------
  
  Control_KeyStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Control_KeyStatus& from);
  void MergeFrom(const Control_KeyStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool keyUp = 1;
  inline bool has_keyup() const;
  inline void clear_keyup();
  static const int kKeyUpFieldNumber = 1;
  inline bool keyup() const;
  inline void set_keyup(bool value);
  
  // required bool keyDown = 2;
  inline bool has_keydown() const;
  inline void clear_keydown();
  static const int kKeyDownFieldNumber = 2;
  inline bool keydown() const;
  inline void set_keydown(bool value);
  
  // required bool keyLeft = 3;
  inline bool has_keyleft() const;
  inline void clear_keyleft();
  static const int kKeyLeftFieldNumber = 3;
  inline bool keyleft() const;
  inline void set_keyleft(bool value);
  
  // required bool keyRight = 4;
  inline bool has_keyright() const;
  inline void clear_keyright();
  static const int kKeyRightFieldNumber = 4;
  inline bool keyright() const;
  inline void set_keyright(bool value);
  
  // required bool keyAttack1 = 5;
  inline bool has_keyattack1() const;
  inline void clear_keyattack1();
  static const int kKeyAttack1FieldNumber = 5;
  inline bool keyattack1() const;
  inline void set_keyattack1(bool value);
  
  // required bool keyAttack2 = 6;
  inline bool has_keyattack2() const;
  inline void clear_keyattack2();
  static const int kKeyAttack2FieldNumber = 6;
  inline bool keyattack2() const;
  inline void set_keyattack2(bool value);
  
  // @@protoc_insertion_point(class_scope:Epsilon5.Control.KeyStatus)
 private:
  inline void set_has_keyup();
  inline void clear_has_keyup();
  inline void set_has_keydown();
  inline void clear_has_keydown();
  inline void set_has_keyleft();
  inline void clear_has_keyleft();
  inline void set_has_keyright();
  inline void clear_has_keyright();
  inline void set_has_keyattack1();
  inline void clear_has_keyattack1();
  inline void set_has_keyattack2();
  inline void clear_has_keyattack2();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool keyup_;
  bool keydown_;
  bool keyleft_;
  bool keyright_;
  bool keyattack1_;
  bool keyattack2_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_Epsilon5_2eproto();
  friend void protobuf_AssignDesc_Epsilon5_2eproto();
  friend void protobuf_ShutdownFile_Epsilon5_2eproto();
  
  void InitAsDefaultInstance();
  static Control_KeyStatus* default_instance_;
};
// -------------------------------------------------------------------

class Control : public ::google::protobuf::Message {
 public:
  Control();
  virtual ~Control();
  
  Control(const Control& from);
  
  inline Control& operator=(const Control& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Control& default_instance();
  
  void Swap(Control* other);
  
  // implements Message ----------------------------------------------
  
  Control* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Control& from);
  void MergeFrom(const Control& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Control_KeyStatus KeyStatus;
  
  // accessors -------------------------------------------------------
  
  // required .Epsilon5.Control.KeyStatus keyStatus = 1;
  inline bool has_keystatus() const;
  inline void clear_keystatus();
  static const int kKeyStatusFieldNumber = 1;
  inline const ::Epsilon5::Control_KeyStatus& keystatus() const;
  inline ::Epsilon5::Control_KeyStatus* mutable_keystatus();
  inline ::Epsilon5::Control_KeyStatus* release_keystatus();
  
  // required double angle = 2;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 2;
  inline double angle() const;
  inline void set_angle(double value);
  
  // required .Epsilon5.Weapon weapon = 3;
  inline bool has_weapon() const;
  inline void clear_weapon();
  static const int kWeaponFieldNumber = 3;
  inline Epsilon5::Weapon weapon() const;
  inline void set_weapon(Epsilon5::Weapon value);
  
  // required uint32 packet_number = 4;
  inline bool has_packet_number() const;
  inline void clear_packet_number();
  static const int kPacketNumberFieldNumber = 4;
  inline ::google::protobuf::uint32 packet_number() const;
  inline void set_packet_number(::google::protobuf::uint32 value);
  
  // optional bool need_full = 5;
  inline bool has_need_full() const;
  inline void clear_need_full();
  static const int kNeedFullFieldNumber = 5;
  inline bool need_full() const;
  inline void set_need_full(bool value);
  
  // @@protoc_insertion_point(class_scope:Epsilon5.Control)
 private:
  inline void set_has_keystatus();
  inline void clear_has_keystatus();
  inline void set_has_angle();
  inline void clear_has_angle();
  inline void set_has_weapon();
  inline void clear_has_weapon();
  inline void set_has_packet_number();
  inline void clear_has_packet_number();
  inline void set_has_need_full();
  inline void clear_has_need_full();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::Epsilon5::Control_KeyStatus* keystatus_;
  double angle_;
  int weapon_;
  ::google::protobuf::uint32 packet_number_;
  bool need_full_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_Epsilon5_2eproto();
  friend void protobuf_AssignDesc_Epsilon5_2eproto();
  friend void protobuf_ShutdownFile_Epsilon5_2eproto();
  
  void InitAsDefaultInstance();
  static Control* default_instance_;
};
// -------------------------------------------------------------------

class Auth : public ::google::protobuf::Message {
 public:
  Auth();
  virtual ~Auth();
  
  Auth(const Auth& from);
  
  inline Auth& operator=(const Auth& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Auth& default_instance();
  
  void Swap(Auth* other);
  
  // implements Message ----------------------------------------------
  
  Auth* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Auth& from);
  void MergeFrom(const Auth& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // @@protoc_insertion_point(class_scope:Epsilon5.Auth)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_password();
  inline void clear_has_password();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* password_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Epsilon5_2eproto();
  friend void protobuf_AssignDesc_Epsilon5_2eproto();
  friend void protobuf_ShutdownFile_Epsilon5_2eproto();
  
  void InitAsDefaultInstance();
  static Auth* default_instance_;
};
// ===================================================================


// ===================================================================

// Player

// required int32 id = 1;
inline bool Player::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Player::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Player::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Player::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Player::id() const {
  return id_;
}
inline void Player::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 x = 2;
inline bool Player::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Player::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Player::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Player::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 Player::x() const {
  return x_;
}
inline void Player::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// required int32 y = 3;
inline bool Player::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Player::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Player::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Player::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 Player::y() const {
  return y_;
}
inline void Player::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// optional double vx = 4;
inline bool Player::has_vx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Player::set_has_vx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Player::clear_has_vx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Player::clear_vx() {
  vx_ = 0;
  clear_has_vx();
}
inline double Player::vx() const {
  return vx_;
}
inline void Player::set_vx(double value) {
  set_has_vx();
  vx_ = value;
}

// optional double vy = 5;
inline bool Player::has_vy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Player::set_has_vy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Player::clear_has_vy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Player::clear_vy() {
  vy_ = 0;
  clear_has_vy();
}
inline double Player::vy() const {
  return vy_;
}
inline void Player::set_vy(double value) {
  set_has_vy();
  vy_ = value;
}

// optional double angle = 6;
inline bool Player::has_angle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Player::set_has_angle() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Player::clear_has_angle() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Player::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline double Player::angle() const {
  return angle_;
}
inline void Player::set_angle(double value) {
  set_has_angle();
  angle_ = value;
}

// optional string name = 7;
inline bool Player::has_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Player::set_has_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Player::clear_has_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Player::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Player::name() const {
  return *name_;
}
inline void Player::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Player::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Player::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Player::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Player::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 hp = 8;
inline bool Player::has_hp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Player::set_has_hp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Player::clear_has_hp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Player::clear_hp() {
  hp_ = 0u;
  clear_has_hp();
}
inline ::google::protobuf::uint32 Player::hp() const {
  return hp_;
}
inline void Player::set_hp(::google::protobuf::uint32 value) {
  set_has_hp();
  hp_ = value;
}

// required bool team = 9;
inline bool Player::has_team() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Player::set_has_team() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Player::clear_has_team() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Player::clear_team() {
  team_ = false;
  clear_has_team();
}
inline bool Player::team() const {
  return team_;
}
inline void Player::set_team(bool value) {
  set_has_team();
  team_ = value;
}

// optional uint32 ping = 10;
inline bool Player::has_ping() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Player::set_has_ping() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Player::clear_has_ping() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Player::clear_ping() {
  ping_ = 0u;
  clear_has_ping();
}
inline ::google::protobuf::uint32 Player::ping() const {
  return ping_;
}
inline void Player::set_ping(::google::protobuf::uint32 value) {
  set_has_ping();
  ping_ = value;
}

// -------------------------------------------------------------------

// Bullet

// required int32 x = 1;
inline bool Bullet::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Bullet::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Bullet::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Bullet::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 Bullet::x() const {
  return x_;
}
inline void Bullet::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// required int32 y = 2;
inline bool Bullet::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Bullet::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Bullet::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Bullet::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 Bullet::y() const {
  return y_;
}
inline void Bullet::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// optional double vx = 3;
inline bool Bullet::has_vx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Bullet::set_has_vx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Bullet::clear_has_vx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Bullet::clear_vx() {
  vx_ = 0;
  clear_has_vx();
}
inline double Bullet::vx() const {
  return vx_;
}
inline void Bullet::set_vx(double value) {
  set_has_vx();
  vx_ = value;
}

// optional double vy = 4;
inline bool Bullet::has_vy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Bullet::set_has_vy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Bullet::clear_has_vy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Bullet::clear_vy() {
  vy_ = 0;
  clear_has_vy();
}
inline double Bullet::vy() const {
  return vy_;
}
inline void Bullet::set_vy(double value) {
  set_has_vy();
  vy_ = value;
}

// optional .Epsilon5.Bullet.Type bullet_type = 5 [default = ARBUZ];
inline bool Bullet::has_bullet_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Bullet::set_has_bullet_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Bullet::clear_has_bullet_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Bullet::clear_bullet_type() {
  bullet_type_ = 0;
  clear_has_bullet_type();
}
inline ::Epsilon5::Bullet_Type Bullet::bullet_type() const {
  return static_cast< ::Epsilon5::Bullet_Type >(bullet_type_);
}
inline void Bullet::set_bullet_type(::Epsilon5::Bullet_Type value) {
  GOOGLE_DCHECK(::Epsilon5::Bullet_Type_IsValid(value));
  set_has_bullet_type();
  bullet_type_ = value;
}

// required bool team = 6;
inline bool Bullet::has_team() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Bullet::set_has_team() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Bullet::clear_has_team() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Bullet::clear_team() {
  team_ = false;
  clear_has_team();
}
inline bool Bullet::team() const {
  return team_;
}
inline void Bullet::set_team(bool value) {
  set_has_team();
  team_ = value;
}

// -------------------------------------------------------------------

// Object

// required uint32 id = 1;
inline bool Object::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Object::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Object::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Object::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Object::id() const {
  return id_;
}
inline void Object::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 resource_id = 2;
inline bool Object::has_resource_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Object::set_has_resource_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Object::clear_has_resource_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Object::clear_resource_id() {
  resource_id_ = 0;
  clear_has_resource_id();
}
inline ::google::protobuf::int32 Object::resource_id() const {
  return resource_id_;
}
inline void Object::set_resource_id(::google::protobuf::int32 value) {
  set_has_resource_id();
  resource_id_ = value;
}

// optional int32 x = 3;
inline bool Object::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Object::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Object::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Object::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 Object::x() const {
  return x_;
}
inline void Object::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// optional int32 y = 4;
inline bool Object::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Object::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Object::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Object::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 Object::y() const {
  return y_;
}
inline void Object::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// optional double angle = 5;
inline bool Object::has_angle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Object::set_has_angle() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Object::clear_has_angle() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Object::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline double Object::angle() const {
  return angle_;
}
inline void Object::set_angle(double value) {
  set_has_angle();
  angle_ = value;
}

// -------------------------------------------------------------------

// RespPoint

// required uint32 id = 1;
inline bool RespPoint::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RespPoint::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RespPoint::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RespPoint::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 RespPoint::id() const {
  return id_;
}
inline void RespPoint::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required int32 x = 2;
inline bool RespPoint::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RespPoint::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RespPoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RespPoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 RespPoint::x() const {
  return x_;
}
inline void RespPoint::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// required int32 y = 3;
inline bool RespPoint::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RespPoint::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RespPoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RespPoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 RespPoint::y() const {
  return y_;
}
inline void RespPoint::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// required int32 team = 4;
inline bool RespPoint::has_team() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RespPoint::set_has_team() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RespPoint::clear_has_team() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RespPoint::clear_team() {
  team_ = 0;
  clear_has_team();
}
inline ::google::protobuf::int32 RespPoint::team() const {
  return team_;
}
inline void RespPoint::set_team(::google::protobuf::int32 value) {
  set_has_team();
  team_ = value;
}

// required bool is_main = 5;
inline bool RespPoint::has_is_main() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RespPoint::set_has_is_main() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RespPoint::clear_has_is_main() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RespPoint::clear_is_main() {
  is_main_ = false;
  clear_has_is_main();
}
inline bool RespPoint::is_main() const {
  return is_main_;
}
inline void RespPoint::set_is_main(bool value) {
  set_has_is_main();
  is_main_ = value;
}

// -------------------------------------------------------------------

// PlayerStat

// required int32 id = 1;
inline bool PlayerStat::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerStat::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerStat::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerStat::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PlayerStat::id() const {
  return id_;
}
inline void PlayerStat::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 score = 2;
inline bool PlayerStat::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerStat::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerStat::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerStat::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 PlayerStat::score() const {
  return score_;
}
inline void PlayerStat::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// required int32 kills = 3;
inline bool PlayerStat::has_kills() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerStat::set_has_kills() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerStat::clear_has_kills() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerStat::clear_kills() {
  kills_ = 0;
  clear_has_kills();
}
inline ::google::protobuf::int32 PlayerStat::kills() const {
  return kills_;
}
inline void PlayerStat::set_kills(::google::protobuf::int32 value) {
  set_has_kills();
  kills_ = value;
}

// required int32 deaths = 4;
inline bool PlayerStat::has_deaths() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerStat::set_has_deaths() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerStat::clear_has_deaths() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerStat::clear_deaths() {
  deaths_ = 0;
  clear_has_deaths();
}
inline ::google::protobuf::int32 PlayerStat::deaths() const {
  return deaths_;
}
inline void PlayerStat::set_deaths(::google::protobuf::int32 value) {
  set_has_deaths();
  deaths_ = value;
}

// -------------------------------------------------------------------

// PlayerInfo

// optional int32 id = 1;
inline bool PlayerInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PlayerInfo::id() const {
  return id_;
}
inline void PlayerInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string map = 2;
inline bool PlayerInfo::has_map() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerInfo::set_has_map() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerInfo::clear_has_map() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerInfo::clear_map() {
  if (map_ != &::google::protobuf::internal::kEmptyString) {
    map_->clear();
  }
  clear_has_map();
}
inline const ::std::string& PlayerInfo::map() const {
  return *map_;
}
inline void PlayerInfo::set_map(const ::std::string& value) {
  set_has_map();
  if (map_ == &::google::protobuf::internal::kEmptyString) {
    map_ = new ::std::string;
  }
  map_->assign(value);
}
inline void PlayerInfo::set_map(const char* value) {
  set_has_map();
  if (map_ == &::google::protobuf::internal::kEmptyString) {
    map_ = new ::std::string;
  }
  map_->assign(value);
}
inline void PlayerInfo::set_map(const char* value, size_t size) {
  set_has_map();
  if (map_ == &::google::protobuf::internal::kEmptyString) {
    map_ = new ::std::string;
  }
  map_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerInfo::mutable_map() {
  set_has_map();
  if (map_ == &::google::protobuf::internal::kEmptyString) {
    map_ = new ::std::string;
  }
  return map_;
}
inline ::std::string* PlayerInfo::release_map() {
  clear_has_map();
  if (map_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = map_;
    map_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 weapon = 3;
inline bool PlayerInfo::has_weapon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerInfo::set_has_weapon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerInfo::clear_has_weapon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerInfo::clear_weapon() {
  weapon_ = 0;
  clear_has_weapon();
}
inline ::google::protobuf::int32 PlayerInfo::weapon() const {
  return weapon_;
}
inline void PlayerInfo::set_weapon(::google::protobuf::int32 value) {
  set_has_weapon();
  weapon_ = value;
}

// optional int32 bullets = 4;
inline bool PlayerInfo::has_bullets() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerInfo::set_has_bullets() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerInfo::clear_has_bullets() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerInfo::clear_bullets() {
  bullets_ = 0;
  clear_has_bullets();
}
inline ::google::protobuf::int32 PlayerInfo::bullets() const {
  return bullets_;
}
inline void PlayerInfo::set_bullets(::google::protobuf::int32 value) {
  set_has_bullets();
  bullets_ = value;
}

// optional int32 cage = 5;
inline bool PlayerInfo::has_cage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerInfo::set_has_cage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerInfo::clear_has_cage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerInfo::clear_cage() {
  cage_ = 0;
  clear_has_cage();
}
inline ::google::protobuf::int32 PlayerInfo::cage() const {
  return cage_;
}
inline void PlayerInfo::set_cage(::google::protobuf::int32 value) {
  set_has_cage();
  cage_ = value;
}

// -------------------------------------------------------------------

// World

// repeated .Epsilon5.Player players = 1;
inline int World::players_size() const {
  return players_.size();
}
inline void World::clear_players() {
  players_.Clear();
}
inline const ::Epsilon5::Player& World::players(int index) const {
  return players_.Get(index);
}
inline ::Epsilon5::Player* World::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::Epsilon5::Player* World::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Epsilon5::Player >&
World::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::Epsilon5::Player >*
World::mutable_players() {
  return &players_;
}

// repeated .Epsilon5.Bullet bullets = 2;
inline int World::bullets_size() const {
  return bullets_.size();
}
inline void World::clear_bullets() {
  bullets_.Clear();
}
inline const ::Epsilon5::Bullet& World::bullets(int index) const {
  return bullets_.Get(index);
}
inline ::Epsilon5::Bullet* World::mutable_bullets(int index) {
  return bullets_.Mutable(index);
}
inline ::Epsilon5::Bullet* World::add_bullets() {
  return bullets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Epsilon5::Bullet >&
World::bullets() const {
  return bullets_;
}
inline ::google::protobuf::RepeatedPtrField< ::Epsilon5::Bullet >*
World::mutable_bullets() {
  return &bullets_;
}

// repeated .Epsilon5.Object objects = 3;
inline int World::objects_size() const {
  return objects_.size();
}
inline void World::clear_objects() {
  objects_.Clear();
}
inline const ::Epsilon5::Object& World::objects(int index) const {
  return objects_.Get(index);
}
inline ::Epsilon5::Object* World::mutable_objects(int index) {
  return objects_.Mutable(index);
}
inline ::Epsilon5::Object* World::add_objects() {
  return objects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Epsilon5::Object >&
World::objects() const {
  return objects_;
}
inline ::google::protobuf::RepeatedPtrField< ::Epsilon5::Object >*
World::mutable_objects() {
  return &objects_;
}

// repeated .Epsilon5.RespPoint resp_points = 4;
inline int World::resp_points_size() const {
  return resp_points_.size();
}
inline void World::clear_resp_points() {
  resp_points_.Clear();
}
inline const ::Epsilon5::RespPoint& World::resp_points(int index) const {
  return resp_points_.Get(index);
}
inline ::Epsilon5::RespPoint* World::mutable_resp_points(int index) {
  return resp_points_.Mutable(index);
}
inline ::Epsilon5::RespPoint* World::add_resp_points() {
  return resp_points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Epsilon5::RespPoint >&
World::resp_points() const {
  return resp_points_;
}
inline ::google::protobuf::RepeatedPtrField< ::Epsilon5::RespPoint >*
World::mutable_resp_points() {
  return &resp_points_;
}

// required uint32 packet_number = 5;
inline bool World::has_packet_number() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void World::set_has_packet_number() {
  _has_bits_[0] |= 0x00000010u;
}
inline void World::clear_has_packet_number() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void World::clear_packet_number() {
  packet_number_ = 0u;
  clear_has_packet_number();
}
inline ::google::protobuf::uint32 World::packet_number() const {
  return packet_number_;
}
inline void World::set_packet_number(::google::protobuf::uint32 value) {
  set_has_packet_number();
  packet_number_ = value;
}

// repeated .Epsilon5.PlayerStat players_stat = 6;
inline int World::players_stat_size() const {
  return players_stat_.size();
}
inline void World::clear_players_stat() {
  players_stat_.Clear();
}
inline const ::Epsilon5::PlayerStat& World::players_stat(int index) const {
  return players_stat_.Get(index);
}
inline ::Epsilon5::PlayerStat* World::mutable_players_stat(int index) {
  return players_stat_.Mutable(index);
}
inline ::Epsilon5::PlayerStat* World::add_players_stat() {
  return players_stat_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Epsilon5::PlayerStat >&
World::players_stat() const {
  return players_stat_;
}
inline ::google::protobuf::RepeatedPtrField< ::Epsilon5::PlayerStat >*
World::mutable_players_stat() {
  return &players_stat_;
}

// optional .Epsilon5.PlayerInfo player_info = 7;
inline bool World::has_player_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void World::set_has_player_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void World::clear_has_player_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void World::clear_player_info() {
  if (player_info_ != NULL) player_info_->::Epsilon5::PlayerInfo::Clear();
  clear_has_player_info();
}
inline const ::Epsilon5::PlayerInfo& World::player_info() const {
  return player_info_ != NULL ? *player_info_ : *default_instance_->player_info_;
}
inline ::Epsilon5::PlayerInfo* World::mutable_player_info() {
  set_has_player_info();
  if (player_info_ == NULL) player_info_ = new ::Epsilon5::PlayerInfo;
  return player_info_;
}
inline ::Epsilon5::PlayerInfo* World::release_player_info() {
  clear_has_player_info();
  ::Epsilon5::PlayerInfo* temp = player_info_;
  player_info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Control_KeyStatus

// required bool keyUp = 1;
inline bool Control_KeyStatus::has_keyup() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Control_KeyStatus::set_has_keyup() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Control_KeyStatus::clear_has_keyup() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Control_KeyStatus::clear_keyup() {
  keyup_ = false;
  clear_has_keyup();
}
inline bool Control_KeyStatus::keyup() const {
  return keyup_;
}
inline void Control_KeyStatus::set_keyup(bool value) {
  set_has_keyup();
  keyup_ = value;
}

// required bool keyDown = 2;
inline bool Control_KeyStatus::has_keydown() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Control_KeyStatus::set_has_keydown() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Control_KeyStatus::clear_has_keydown() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Control_KeyStatus::clear_keydown() {
  keydown_ = false;
  clear_has_keydown();
}
inline bool Control_KeyStatus::keydown() const {
  return keydown_;
}
inline void Control_KeyStatus::set_keydown(bool value) {
  set_has_keydown();
  keydown_ = value;
}

// required bool keyLeft = 3;
inline bool Control_KeyStatus::has_keyleft() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Control_KeyStatus::set_has_keyleft() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Control_KeyStatus::clear_has_keyleft() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Control_KeyStatus::clear_keyleft() {
  keyleft_ = false;
  clear_has_keyleft();
}
inline bool Control_KeyStatus::keyleft() const {
  return keyleft_;
}
inline void Control_KeyStatus::set_keyleft(bool value) {
  set_has_keyleft();
  keyleft_ = value;
}

// required bool keyRight = 4;
inline bool Control_KeyStatus::has_keyright() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Control_KeyStatus::set_has_keyright() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Control_KeyStatus::clear_has_keyright() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Control_KeyStatus::clear_keyright() {
  keyright_ = false;
  clear_has_keyright();
}
inline bool Control_KeyStatus::keyright() const {
  return keyright_;
}
inline void Control_KeyStatus::set_keyright(bool value) {
  set_has_keyright();
  keyright_ = value;
}

// required bool keyAttack1 = 5;
inline bool Control_KeyStatus::has_keyattack1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Control_KeyStatus::set_has_keyattack1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Control_KeyStatus::clear_has_keyattack1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Control_KeyStatus::clear_keyattack1() {
  keyattack1_ = false;
  clear_has_keyattack1();
}
inline bool Control_KeyStatus::keyattack1() const {
  return keyattack1_;
}
inline void Control_KeyStatus::set_keyattack1(bool value) {
  set_has_keyattack1();
  keyattack1_ = value;
}

// required bool keyAttack2 = 6;
inline bool Control_KeyStatus::has_keyattack2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Control_KeyStatus::set_has_keyattack2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Control_KeyStatus::clear_has_keyattack2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Control_KeyStatus::clear_keyattack2() {
  keyattack2_ = false;
  clear_has_keyattack2();
}
inline bool Control_KeyStatus::keyattack2() const {
  return keyattack2_;
}
inline void Control_KeyStatus::set_keyattack2(bool value) {
  set_has_keyattack2();
  keyattack2_ = value;
}

// -------------------------------------------------------------------

// Control

// required .Epsilon5.Control.KeyStatus keyStatus = 1;
inline bool Control::has_keystatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Control::set_has_keystatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Control::clear_has_keystatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Control::clear_keystatus() {
  if (keystatus_ != NULL) keystatus_->::Epsilon5::Control_KeyStatus::Clear();
  clear_has_keystatus();
}
inline const ::Epsilon5::Control_KeyStatus& Control::keystatus() const {
  return keystatus_ != NULL ? *keystatus_ : *default_instance_->keystatus_;
}
inline ::Epsilon5::Control_KeyStatus* Control::mutable_keystatus() {
  set_has_keystatus();
  if (keystatus_ == NULL) keystatus_ = new ::Epsilon5::Control_KeyStatus;
  return keystatus_;
}
inline ::Epsilon5::Control_KeyStatus* Control::release_keystatus() {
  clear_has_keystatus();
  ::Epsilon5::Control_KeyStatus* temp = keystatus_;
  keystatus_ = NULL;
  return temp;
}

// required double angle = 2;
inline bool Control::has_angle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Control::set_has_angle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Control::clear_has_angle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Control::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline double Control::angle() const {
  return angle_;
}
inline void Control::set_angle(double value) {
  set_has_angle();
  angle_ = value;
}

// required .Epsilon5.Weapon weapon = 3;
inline bool Control::has_weapon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Control::set_has_weapon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Control::clear_has_weapon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Control::clear_weapon() {
  weapon_ = 0;
  clear_has_weapon();
}
inline Epsilon5::Weapon Control::weapon() const {
  return static_cast< Epsilon5::Weapon >(weapon_);
}
inline void Control::set_weapon(Epsilon5::Weapon value) {
  GOOGLE_DCHECK(Epsilon5::Weapon_IsValid(value));
  set_has_weapon();
  weapon_ = value;
}

// required uint32 packet_number = 4;
inline bool Control::has_packet_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Control::set_has_packet_number() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Control::clear_has_packet_number() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Control::clear_packet_number() {
  packet_number_ = 0u;
  clear_has_packet_number();
}
inline ::google::protobuf::uint32 Control::packet_number() const {
  return packet_number_;
}
inline void Control::set_packet_number(::google::protobuf::uint32 value) {
  set_has_packet_number();
  packet_number_ = value;
}

// optional bool need_full = 5;
inline bool Control::has_need_full() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Control::set_has_need_full() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Control::clear_has_need_full() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Control::clear_need_full() {
  need_full_ = false;
  clear_has_need_full();
}
inline bool Control::need_full() const {
  return need_full_;
}
inline void Control::set_need_full(bool value) {
  set_has_need_full();
  need_full_ = value;
}

// -------------------------------------------------------------------

// Auth

// required string name = 1;
inline bool Auth::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Auth::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Auth::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Auth::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Auth::name() const {
  return *name_;
}
inline void Auth::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Auth::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Auth::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Auth::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Auth::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string password = 2;
inline bool Auth::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Auth::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Auth::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Auth::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& Auth::password() const {
  return *password_;
}
inline void Auth::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Auth::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Auth::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Auth::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* Auth::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Epsilon5

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Epsilon5::Bullet_Type>() {
  return ::Epsilon5::Bullet_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< Epsilon5::Weapon>() {
  return Epsilon5::Weapon_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Epsilon5_2eproto__INCLUDED
