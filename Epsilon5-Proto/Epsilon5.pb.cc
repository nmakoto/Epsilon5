// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Epsilon5.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Epsilon5 {

namespace {

const ::google::protobuf::Descriptor* Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* Bullet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bullet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Bullet_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Object_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Object_reflection_ = NULL;
const ::google::protobuf::Descriptor* RespPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RespPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerStat_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_reflection_ = NULL;
const ::google::protobuf::Descriptor* Control_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Control_reflection_ = NULL;
const ::google::protobuf::Descriptor* Control_KeyStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Control_KeyStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Auth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Auth_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Weapon_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Epsilon5_2eproto() {
  protobuf_AddDesc_Epsilon5_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Epsilon5.proto");
  GOOGLE_CHECK(file != NULL);
  Player_descriptor_ = file->message_type(0);
  static const int Player_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, vx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, vy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, ping_),
  };
  Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Player_descriptor_,
      Player::default_instance_,
      Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Player));
  Bullet_descriptor_ = file->message_type(1);
  static const int Bullet_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bullet, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bullet, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bullet, vx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bullet, vy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bullet, bullet_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bullet, team_),
  };
  Bullet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bullet_descriptor_,
      Bullet::default_instance_,
      Bullet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bullet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bullet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bullet));
  Bullet_Type_descriptor_ = Bullet_descriptor_->enum_type(0);
  Object_descriptor_ = file->message_type(2);
  static const int Object_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, resource_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, angle_),
  };
  Object_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Object_descriptor_,
      Object::default_instance_,
      Object_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Object));
  RespPoint_descriptor_ = file->message_type(3);
  static const int RespPoint_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespPoint, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespPoint, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespPoint, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespPoint, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespPoint, is_main_),
  };
  RespPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RespPoint_descriptor_,
      RespPoint::default_instance_,
      RespPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RespPoint));
  PlayerStat_descriptor_ = file->message_type(4);
  static const int PlayerStat_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStat, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStat, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStat, kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStat, deaths_),
  };
  PlayerStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerStat_descriptor_,
      PlayerStat::default_instance_,
      PlayerStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerStat));
  PlayerInfo_descriptor_ = file->message_type(5);
  static const int PlayerInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, bullets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, cage_),
  };
  PlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerInfo_descriptor_,
      PlayerInfo::default_instance_,
      PlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerInfo));
  World_descriptor_ = file->message_type(6);
  static const int World_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World, bullets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World, objects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World, resp_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World, packet_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World, players_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World, player_info_),
  };
  World_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_descriptor_,
      World::default_instance_,
      World_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World));
  Control_descriptor_ = file->message_type(7);
  static const int Control_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, keystatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, packet_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, need_full_),
  };
  Control_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Control_descriptor_,
      Control::default_instance_,
      Control_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Control));
  Control_KeyStatus_descriptor_ = Control_descriptor_->nested_type(0);
  static const int Control_KeyStatus_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_KeyStatus, keyup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_KeyStatus, keydown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_KeyStatus, keyleft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_KeyStatus, keyright_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_KeyStatus, keyattack1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_KeyStatus, keyattack2_),
  };
  Control_KeyStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Control_KeyStatus_descriptor_,
      Control_KeyStatus::default_instance_,
      Control_KeyStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_KeyStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_KeyStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Control_KeyStatus));
  Auth_descriptor_ = file->message_type(8);
  static const int Auth_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auth, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auth, password_),
  };
  Auth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Auth_descriptor_,
      Auth::default_instance_,
      Auth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Auth));
  Weapon_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Epsilon5_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Player_descriptor_, &Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bullet_descriptor_, &Bullet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Object_descriptor_, &Object::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RespPoint_descriptor_, &RespPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerStat_descriptor_, &PlayerStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerInfo_descriptor_, &PlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_descriptor_, &World::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Control_descriptor_, &Control::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Control_KeyStatus_descriptor_, &Control_KeyStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Auth_descriptor_, &Auth::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Epsilon5_2eproto() {
  delete Player::default_instance_;
  delete Player_reflection_;
  delete Bullet::default_instance_;
  delete Bullet_reflection_;
  delete Object::default_instance_;
  delete Object_reflection_;
  delete RespPoint::default_instance_;
  delete RespPoint_reflection_;
  delete PlayerStat::default_instance_;
  delete PlayerStat_reflection_;
  delete PlayerInfo::default_instance_;
  delete PlayerInfo_reflection_;
  delete World::default_instance_;
  delete World_reflection_;
  delete Control::default_instance_;
  delete Control_reflection_;
  delete Control_KeyStatus::default_instance_;
  delete Control_KeyStatus_reflection_;
  delete Auth::default_instance_;
  delete Auth_reflection_;
}

void protobuf_AddDesc_Epsilon5_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016Epsilon5.proto\022\010Epsilon5\"\207\001\n\006Player\022\n\n"
    "\002id\030\001 \002(\005\022\t\n\001x\030\002 \002(\005\022\t\n\001y\030\003 \002(\005\022\n\n\002vx\030\004 "
    "\001(\001\022\n\n\002vy\030\005 \001(\001\022\r\n\005angle\030\006 \001(\001\022\014\n\004name\030\007"
    " \001(\t\022\n\n\002hp\030\010 \001(\r\022\014\n\004team\030\t \002(\010\022\014\n\004ping\030\n"
    " \001(\r\"\251\001\n\006Bullet\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002(\005\022\n\n"
    "\002vx\030\003 \001(\001\022\n\n\002vy\030\004 \001(\001\0221\n\013bullet_type\030\005 \001"
    "(\0162\025.Epsilon5.Bullet.Type:\005ARBUZ\022\014\n\004team"
    "\030\006 \002(\010\"0\n\004Type\022\t\n\005ARBUZ\020\000\022\021\n\rLITTLE_BULL"
    "ET\020\001\022\n\n\006ROCKET\020\002\"N\n\006Object\022\n\n\002id\030\001 \002(\r\022\023"
    "\n\013resource_id\030\002 \001(\005\022\t\n\001x\030\003 \001(\005\022\t\n\001y\030\004 \001("
    "\005\022\r\n\005angle\030\005 \001(\001\"L\n\tRespPoint\022\n\n\002id\030\001 \002("
    "\r\022\t\n\001x\030\002 \002(\005\022\t\n\001y\030\003 \002(\005\022\014\n\004team\030\004 \002(\005\022\017\n"
    "\007is_main\030\005 \002(\010\"F\n\nPlayerStat\022\n\n\002id\030\001 \002(\005"
    "\022\r\n\005score\030\002 \002(\005\022\r\n\005kills\030\003 \002(\005\022\016\n\006deaths"
    "\030\004 \002(\005\"T\n\nPlayerInfo\022\n\n\002id\030\001 \001(\005\022\013\n\003map\030"
    "\002 \001(\t\022\016\n\006weapon\030\003 \001(\005\022\017\n\007bullets\030\004 \001(\005\022\014"
    "\n\004cage\030\005 \001(\005\"\210\002\n\005World\022!\n\007players\030\001 \003(\0132"
    "\020.Epsilon5.Player\022!\n\007bullets\030\002 \003(\0132\020.Eps"
    "ilon5.Bullet\022!\n\007objects\030\003 \003(\0132\020.Epsilon5"
    ".Object\022(\n\013resp_points\030\004 \003(\0132\023.Epsilon5."
    "RespPoint\022\025\n\rpacket_number\030\005 \002(\r\022*\n\014play"
    "ers_stat\030\006 \003(\0132\024.Epsilon5.PlayerStat\022)\n\013"
    "player_info\030\007 \001(\0132\024.Epsilon5.PlayerInfo\""
    "\214\002\n\007Control\022.\n\tkeyStatus\030\001 \002(\0132\033.Epsilon"
    "5.Control.KeyStatus\022\r\n\005angle\030\002 \002(\001\022 \n\006we"
    "apon\030\003 \002(\0162\020.Epsilon5.Weapon\022\025\n\rpacket_n"
    "umber\030\004 \002(\r\022\021\n\tneed_full\030\005 \001(\010\032v\n\tKeySta"
    "tus\022\r\n\005keyUp\030\001 \002(\010\022\017\n\007keyDown\030\002 \002(\010\022\017\n\007k"
    "eyLeft\030\003 \002(\010\022\020\n\010keyRight\030\004 \002(\010\022\022\n\nkeyAtt"
    "ack1\030\005 \002(\010\022\022\n\nkeyAttack2\030\006 \002(\010\"&\n\004Auth\022\014"
    "\n\004name\030\001 \002(\t\022\020\n\010password\030\002 \001(\t*1\n\006Weapon"
    "\022\n\n\006Pistol\020\000\022\016\n\nMachinegun\020\001\022\013\n\007Shotgun\020"
    "\002", 1281);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Epsilon5.proto", &protobuf_RegisterTypes);
  Player::default_instance_ = new Player();
  Bullet::default_instance_ = new Bullet();
  Object::default_instance_ = new Object();
  RespPoint::default_instance_ = new RespPoint();
  PlayerStat::default_instance_ = new PlayerStat();
  PlayerInfo::default_instance_ = new PlayerInfo();
  World::default_instance_ = new World();
  Control::default_instance_ = new Control();
  Control_KeyStatus::default_instance_ = new Control_KeyStatus();
  Auth::default_instance_ = new Auth();
  Player::default_instance_->InitAsDefaultInstance();
  Bullet::default_instance_->InitAsDefaultInstance();
  Object::default_instance_->InitAsDefaultInstance();
  RespPoint::default_instance_->InitAsDefaultInstance();
  PlayerStat::default_instance_->InitAsDefaultInstance();
  PlayerInfo::default_instance_->InitAsDefaultInstance();
  World::default_instance_->InitAsDefaultInstance();
  Control::default_instance_->InitAsDefaultInstance();
  Control_KeyStatus::default_instance_->InitAsDefaultInstance();
  Auth::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Epsilon5_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Epsilon5_2eproto {
  StaticDescriptorInitializer_Epsilon5_2eproto() {
    protobuf_AddDesc_Epsilon5_2eproto();
  }
} static_descriptor_initializer_Epsilon5_2eproto_;

const ::google::protobuf::EnumDescriptor* Weapon_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Weapon_descriptor_;
}
bool Weapon_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Player::kIdFieldNumber;
const int Player::kXFieldNumber;
const int Player::kYFieldNumber;
const int Player::kVxFieldNumber;
const int Player::kVyFieldNumber;
const int Player::kAngleFieldNumber;
const int Player::kNameFieldNumber;
const int Player::kHpFieldNumber;
const int Player::kTeamFieldNumber;
const int Player::kPingFieldNumber;
#endif  // !_MSC_VER

Player::Player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Player::InitAsDefaultInstance() {
}

Player::Player(const Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Player::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  x_ = 0;
  y_ = 0;
  vx_ = 0;
  vy_ = 0;
  angle_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hp_ = 0u;
  team_ = false;
  ping_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Player::~Player() {
  SharedDtor();
}

void Player::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_descriptor_;
}

const Player& Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Epsilon5_2eproto();  return *default_instance_;
}

Player* Player::default_instance_ = NULL;

Player* Player::New() const {
  return new Player;
}

void Player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    x_ = 0;
    y_ = 0;
    vx_ = 0;
    vy_ = 0;
    angle_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    hp_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    team_ = false;
    ping_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }
      
      // required int32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }
      
      // required int32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_vx;
        break;
      }
      
      // optional double vx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_vx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vx_)));
          set_has_vx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_vy;
        break;
      }
      
      // optional double vy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_vy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vy_)));
          set_has_vy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_angle;
        break;
      }
      
      // optional double angle = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }
      
      // optional string name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_hp;
        break;
      }
      
      // optional uint32 hp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_team;
        break;
      }
      
      // required bool team = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ping;
        break;
      }
      
      // optional uint32 ping = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_)));
          set_has_ping();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }
  
  // required int32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }
  
  // optional double vx = 4;
  if (has_vx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->vx(), output);
  }
  
  // optional double vy = 5;
  if (has_vy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->vy(), output);
  }
  
  // optional double angle = 6;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->angle(), output);
  }
  
  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->name(), output);
  }
  
  // optional uint32 hp = 8;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->hp(), output);
  }
  
  // required bool team = 9;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->team(), output);
  }
  
  // optional uint32 ping = 10;
  if (has_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->ping(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required int32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }
  
  // required int32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }
  
  // optional double vx = 4;
  if (has_vx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->vx(), target);
  }
  
  // optional double vy = 5;
  if (has_vy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->vy(), target);
  }
  
  // optional double angle = 6;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->angle(), target);
  }
  
  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }
  
  // optional uint32 hp = 8;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->hp(), target);
  }
  
  // required bool team = 9;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->team(), target);
  }
  
  // optional uint32 ping = 10;
  if (has_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->ping(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Player::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }
    
    // required int32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }
    
    // optional double vx = 4;
    if (has_vx()) {
      total_size += 1 + 8;
    }
    
    // optional double vy = 5;
    if (has_vy()) {
      total_size += 1 + 8;
    }
    
    // optional double angle = 6;
    if (has_angle()) {
      total_size += 1 + 8;
    }
    
    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional uint32 hp = 8;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool team = 9;
    if (has_team()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 ping = 10;
    if (has_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Player::MergeFrom(const Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_vx()) {
      set_vx(from.vx());
    }
    if (from.has_vy()) {
      set_vy(from.vy());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_ping()) {
      set_ping(from.ping());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player::CopyFrom(const Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000107) != 0x00000107) return false;
  
  return true;
}

void Player::Swap(Player* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(vx_, other->vx_);
    std::swap(vy_, other->vy_);
    std::swap(angle_, other->angle_);
    std::swap(name_, other->name_);
    std::swap(hp_, other->hp_);
    std::swap(team_, other->team_);
    std::swap(ping_, other->ping_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_descriptor_;
  metadata.reflection = Player_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Bullet_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bullet_Type_descriptor_;
}
bool Bullet_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Bullet_Type Bullet::ARBUZ;
const Bullet_Type Bullet::LITTLE_BULLET;
const Bullet_Type Bullet::ROCKET;
const Bullet_Type Bullet::Type_MIN;
const Bullet_Type Bullet::Type_MAX;
const int Bullet::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Bullet::kXFieldNumber;
const int Bullet::kYFieldNumber;
const int Bullet::kVxFieldNumber;
const int Bullet::kVyFieldNumber;
const int Bullet::kBulletTypeFieldNumber;
const int Bullet::kTeamFieldNumber;
#endif  // !_MSC_VER

Bullet::Bullet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Bullet::InitAsDefaultInstance() {
}

Bullet::Bullet(const Bullet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Bullet::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  vx_ = 0;
  vy_ = 0;
  bullet_type_ = 0;
  team_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bullet::~Bullet() {
  SharedDtor();
}

void Bullet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Bullet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bullet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bullet_descriptor_;
}

const Bullet& Bullet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Epsilon5_2eproto();  return *default_instance_;
}

Bullet* Bullet::default_instance_ = NULL;

Bullet* Bullet::New() const {
  return new Bullet;
}

void Bullet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    vx_ = 0;
    vy_ = 0;
    bullet_type_ = 0;
    team_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bullet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }
      
      // required int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_vx;
        break;
      }
      
      // optional double vx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_vx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vx_)));
          set_has_vx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_vy;
        break;
      }
      
      // optional double vy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_vy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vy_)));
          set_has_vy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bullet_type;
        break;
      }
      
      // optional .Epsilon5.Bullet.Type bullet_type = 5 [default = ARBUZ];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Epsilon5::Bullet_Type_IsValid(value)) {
            set_bullet_type(static_cast< ::Epsilon5::Bullet_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_team;
        break;
      }
      
      // required bool team = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Bullet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }
  
  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }
  
  // optional double vx = 3;
  if (has_vx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->vx(), output);
  }
  
  // optional double vy = 4;
  if (has_vy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->vy(), output);
  }
  
  // optional .Epsilon5.Bullet.Type bullet_type = 5 [default = ARBUZ];
  if (has_bullet_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->bullet_type(), output);
  }
  
  // required bool team = 6;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->team(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Bullet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }
  
  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }
  
  // optional double vx = 3;
  if (has_vx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->vx(), target);
  }
  
  // optional double vy = 4;
  if (has_vy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->vy(), target);
  }
  
  // optional .Epsilon5.Bullet.Type bullet_type = 5 [default = ARBUZ];
  if (has_bullet_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->bullet_type(), target);
  }
  
  // required bool team = 6;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->team(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Bullet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }
    
    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }
    
    // optional double vx = 3;
    if (has_vx()) {
      total_size += 1 + 8;
    }
    
    // optional double vy = 4;
    if (has_vy()) {
      total_size += 1 + 8;
    }
    
    // optional .Epsilon5.Bullet.Type bullet_type = 5 [default = ARBUZ];
    if (has_bullet_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bullet_type());
    }
    
    // required bool team = 6;
    if (has_team()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bullet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bullet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bullet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bullet::MergeFrom(const Bullet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_vx()) {
      set_vx(from.vx());
    }
    if (from.has_vy()) {
      set_vy(from.vy());
    }
    if (from.has_bullet_type()) {
      set_bullet_type(from.bullet_type());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bullet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bullet::CopyFrom(const Bullet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bullet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000023) != 0x00000023) return false;
  
  return true;
}

void Bullet::Swap(Bullet* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(vx_, other->vx_);
    std::swap(vy_, other->vy_);
    std::swap(bullet_type_, other->bullet_type_);
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bullet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bullet_descriptor_;
  metadata.reflection = Bullet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Object::kIdFieldNumber;
const int Object::kResourceIdFieldNumber;
const int Object::kXFieldNumber;
const int Object::kYFieldNumber;
const int Object::kAngleFieldNumber;
#endif  // !_MSC_VER

Object::Object()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Object::InitAsDefaultInstance() {
}

Object::Object(const Object& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Object::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  resource_id_ = 0;
  x_ = 0;
  y_ = 0;
  angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Object::~Object() {
  SharedDtor();
}

void Object::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Object::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Object::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Object_descriptor_;
}

const Object& Object::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Epsilon5_2eproto();  return *default_instance_;
}

Object* Object::default_instance_ = NULL;

Object* Object::New() const {
  return new Object;
}

void Object::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    resource_id_ = 0;
    x_ = 0;
    y_ = 0;
    angle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_resource_id;
        break;
      }
      
      // optional int32 resource_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resource_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resource_id_)));
          set_has_resource_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_x;
        break;
      }
      
      // optional int32 x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_y;
        break;
      }
      
      // optional int32 y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_angle;
        break;
      }
      
      // optional double angle = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional int32 resource_id = 2;
  if (has_resource_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->resource_id(), output);
  }
  
  // optional int32 x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->x(), output);
  }
  
  // optional int32 y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->y(), output);
  }
  
  // optional double angle = 5;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->angle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Object::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 resource_id = 2;
  if (has_resource_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->resource_id(), target);
  }
  
  // optional int32 x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->x(), target);
  }
  
  // optional int32 y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->y(), target);
  }
  
  // optional double angle = 5;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->angle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Object::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional int32 resource_id = 2;
    if (has_resource_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resource_id());
    }
    
    // optional int32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }
    
    // optional int32 y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }
    
    // optional double angle = 5;
    if (has_angle()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Object::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Object* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Object*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Object::MergeFrom(const Object& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_resource_id()) {
      set_resource_id(from.resource_id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Object::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object::CopyFrom(const Object& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Object::Swap(Object* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(resource_id_, other->resource_id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(angle_, other->angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Object::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Object_descriptor_;
  metadata.reflection = Object_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RespPoint::kIdFieldNumber;
const int RespPoint::kXFieldNumber;
const int RespPoint::kYFieldNumber;
const int RespPoint::kTeamFieldNumber;
const int RespPoint::kIsMainFieldNumber;
#endif  // !_MSC_VER

RespPoint::RespPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RespPoint::InitAsDefaultInstance() {
}

RespPoint::RespPoint(const RespPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RespPoint::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  x_ = 0;
  y_ = 0;
  team_ = 0;
  is_main_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RespPoint::~RespPoint() {
  SharedDtor();
}

void RespPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RespPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RespPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RespPoint_descriptor_;
}

const RespPoint& RespPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Epsilon5_2eproto();  return *default_instance_;
}

RespPoint* RespPoint::default_instance_ = NULL;

RespPoint* RespPoint::New() const {
  return new RespPoint;
}

void RespPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    x_ = 0;
    y_ = 0;
    team_ = 0;
    is_main_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RespPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }
      
      // required int32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }
      
      // required int32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_team;
        break;
      }
      
      // required int32 team = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_main;
        break;
      }
      
      // required bool is_main = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_main:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_main_)));
          set_has_is_main();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RespPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }
  
  // required int32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }
  
  // required int32 team = 4;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->team(), output);
  }
  
  // required bool is_main = 5;
  if (has_is_main()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_main(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RespPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required int32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }
  
  // required int32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }
  
  // required int32 team = 4;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->team(), target);
  }
  
  // required bool is_main = 5;
  if (has_is_main()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_main(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RespPoint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required int32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }
    
    // required int32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }
    
    // required int32 team = 4;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team());
    }
    
    // required bool is_main = 5;
    if (has_is_main()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RespPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RespPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RespPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RespPoint::MergeFrom(const RespPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_is_main()) {
      set_is_main(from.is_main());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RespPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespPoint::CopyFrom(const RespPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void RespPoint::Swap(RespPoint* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(team_, other->team_);
    std::swap(is_main_, other->is_main_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RespPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RespPoint_descriptor_;
  metadata.reflection = RespPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerStat::kIdFieldNumber;
const int PlayerStat::kScoreFieldNumber;
const int PlayerStat::kKillsFieldNumber;
const int PlayerStat::kDeathsFieldNumber;
#endif  // !_MSC_VER

PlayerStat::PlayerStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerStat::InitAsDefaultInstance() {
}

PlayerStat::PlayerStat(const PlayerStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerStat::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  score_ = 0;
  kills_ = 0;
  deaths_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerStat::~PlayerStat() {
  SharedDtor();
}

void PlayerStat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerStat_descriptor_;
}

const PlayerStat& PlayerStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Epsilon5_2eproto();  return *default_instance_;
}

PlayerStat* PlayerStat::default_instance_ = NULL;

PlayerStat* PlayerStat::New() const {
  return new PlayerStat;
}

void PlayerStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    score_ = 0;
    kills_ = 0;
    deaths_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }
      
      // required int32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kills;
        break;
      }
      
      // required int32 kills = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kills_)));
          set_has_kills();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_deaths;
        break;
      }
      
      // required int32 deaths = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deaths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deaths_)));
          set_has_deaths();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required int32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }
  
  // required int32 kills = 3;
  if (has_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->kills(), output);
  }
  
  // required int32 deaths = 4;
  if (has_deaths()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->deaths(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required int32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }
  
  // required int32 kills = 3;
  if (has_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->kills(), target);
  }
  
  // required int32 deaths = 4;
  if (has_deaths()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->deaths(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerStat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }
    
    // required int32 kills = 3;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kills());
    }
    
    // required int32 deaths = 4;
    if (has_deaths()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deaths());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerStat::MergeFrom(const PlayerStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_kills()) {
      set_kills(from.kills());
    }
    if (from.has_deaths()) {
      set_deaths(from.deaths());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerStat::CopyFrom(const PlayerStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void PlayerStat::Swap(PlayerStat* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(score_, other->score_);
    std::swap(kills_, other->kills_);
    std::swap(deaths_, other->deaths_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerStat_descriptor_;
  metadata.reflection = PlayerStat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerInfo::kIdFieldNumber;
const int PlayerInfo::kMapFieldNumber;
const int PlayerInfo::kWeaponFieldNumber;
const int PlayerInfo::kBulletsFieldNumber;
const int PlayerInfo::kCageFieldNumber;
#endif  // !_MSC_VER

PlayerInfo::PlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerInfo::InitAsDefaultInstance() {
}

PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  map_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weapon_ = 0;
  bullets_ = 0;
  cage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfo::~PlayerInfo() {
  SharedDtor();
}

void PlayerInfo::SharedDtor() {
  if (map_ != &::google::protobuf::internal::kEmptyString) {
    delete map_;
  }
  if (this != default_instance_) {
  }
}

void PlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfo_descriptor_;
}

const PlayerInfo& PlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Epsilon5_2eproto();  return *default_instance_;
}

PlayerInfo* PlayerInfo::default_instance_ = NULL;

PlayerInfo* PlayerInfo::New() const {
  return new PlayerInfo;
}

void PlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_map()) {
      if (map_ != &::google::protobuf::internal::kEmptyString) {
        map_->clear();
      }
    }
    weapon_ = 0;
    bullets_ = 0;
    cage_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_map;
        break;
      }
      
      // optional string map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->map().data(), this->map().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_weapon;
        break;
      }
      
      // optional int32 weapon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapon_)));
          set_has_weapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bullets;
        break;
      }
      
      // optional int32 bullets = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullets_)));
          set_has_bullets();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cage;
        break;
      }
      
      // optional int32 cage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cage_)));
          set_has_cage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string map = 2;
  if (has_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->map().data(), this->map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->map(), output);
  }
  
  // optional int32 weapon = 3;
  if (has_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->weapon(), output);
  }
  
  // optional int32 bullets = 4;
  if (has_bullets()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bullets(), output);
  }
  
  // optional int32 cage = 5;
  if (has_cage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string map = 2;
  if (has_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->map().data(), this->map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->map(), target);
  }
  
  // optional int32 weapon = 3;
  if (has_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->weapon(), target);
  }
  
  // optional int32 bullets = 4;
  if (has_bullets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bullets(), target);
  }
  
  // optional int32 cage = 5;
  if (has_cage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string map = 2;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map());
    }
    
    // optional int32 weapon = 3;
    if (has_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weapon());
    }
    
    // optional int32 bullets = 4;
    if (has_bullets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bullets());
    }
    
    // optional int32 cage = 5;
    if (has_cage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_map()) {
      set_map(from.map());
    }
    if (from.has_weapon()) {
      set_weapon(from.weapon());
    }
    if (from.has_bullets()) {
      set_bullets(from.bullets());
    }
    if (from.has_cage()) {
      set_cage(from.cage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  
  return true;
}

void PlayerInfo::Swap(PlayerInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(map_, other->map_);
    std::swap(weapon_, other->weapon_);
    std::swap(bullets_, other->bullets_);
    std::swap(cage_, other->cage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfo_descriptor_;
  metadata.reflection = PlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World::kPlayersFieldNumber;
const int World::kBulletsFieldNumber;
const int World::kObjectsFieldNumber;
const int World::kRespPointsFieldNumber;
const int World::kPacketNumberFieldNumber;
const int World::kPlayersStatFieldNumber;
const int World::kPlayerInfoFieldNumber;
#endif  // !_MSC_VER

World::World()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World::InitAsDefaultInstance() {
  player_info_ = const_cast< ::Epsilon5::PlayerInfo*>(&::Epsilon5::PlayerInfo::default_instance());
}

World::World(const World& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World::SharedCtor() {
  _cached_size_ = 0;
  packet_number_ = 0u;
  player_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World::~World() {
  SharedDtor();
}

void World::SharedDtor() {
  if (this != default_instance_) {
    delete player_info_;
  }
}

void World::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_descriptor_;
}

const World& World::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Epsilon5_2eproto();  return *default_instance_;
}

World* World::default_instance_ = NULL;

World* World::New() const {
  return new World;
}

void World::Clear() {
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    packet_number_ = 0u;
    if (has_player_info()) {
      if (player_info_ != NULL) player_info_->::Epsilon5::PlayerInfo::Clear();
    }
  }
  players_.Clear();
  bullets_.Clear();
  objects_.Clear();
  resp_points_.Clear();
  players_stat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Epsilon5.Player players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectTag(18)) goto parse_bullets;
        break;
      }
      
      // repeated .Epsilon5.Bullet bullets = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bullets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bullets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bullets;
        if (input->ExpectTag(26)) goto parse_objects;
        break;
      }
      
      // repeated .Epsilon5.Object objects = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_objects;
        if (input->ExpectTag(34)) goto parse_resp_points;
        break;
      }
      
      // repeated .Epsilon5.RespPoint resp_points = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resp_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resp_points()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_resp_points;
        if (input->ExpectTag(40)) goto parse_packet_number;
        break;
      }
      
      // required uint32 packet_number = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packet_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packet_number_)));
          set_has_packet_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_players_stat;
        break;
      }
      
      // repeated .Epsilon5.PlayerStat players_stat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_players_stat;
        if (input->ExpectTag(58)) goto parse_player_info;
        break;
      }
      
      // optional .Epsilon5.PlayerInfo player_info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Epsilon5.Player players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }
  
  // repeated .Epsilon5.Bullet bullets = 2;
  for (int i = 0; i < this->bullets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bullets(i), output);
  }
  
  // repeated .Epsilon5.Object objects = 3;
  for (int i = 0; i < this->objects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->objects(i), output);
  }
  
  // repeated .Epsilon5.RespPoint resp_points = 4;
  for (int i = 0; i < this->resp_points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->resp_points(i), output);
  }
  
  // required uint32 packet_number = 5;
  if (has_packet_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->packet_number(), output);
  }
  
  // repeated .Epsilon5.PlayerStat players_stat = 6;
  for (int i = 0; i < this->players_stat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->players_stat(i), output);
  }
  
  // optional .Epsilon5.PlayerInfo player_info = 7;
  if (has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->player_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Epsilon5.Player players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }
  
  // repeated .Epsilon5.Bullet bullets = 2;
  for (int i = 0; i < this->bullets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bullets(i), target);
  }
  
  // repeated .Epsilon5.Object objects = 3;
  for (int i = 0; i < this->objects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->objects(i), target);
  }
  
  // repeated .Epsilon5.RespPoint resp_points = 4;
  for (int i = 0; i < this->resp_points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->resp_points(i), target);
  }
  
  // required uint32 packet_number = 5;
  if (has_packet_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->packet_number(), target);
  }
  
  // repeated .Epsilon5.PlayerStat players_stat = 6;
  for (int i = 0; i < this->players_stat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->players_stat(i), target);
  }
  
  // optional .Epsilon5.PlayerInfo player_info = 7;
  if (has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->player_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // required uint32 packet_number = 5;
    if (has_packet_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packet_number());
    }
    
    // optional .Epsilon5.PlayerInfo player_info = 7;
    if (has_player_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_info());
    }
    
  }
  // repeated .Epsilon5.Player players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }
  
  // repeated .Epsilon5.Bullet bullets = 2;
  total_size += 1 * this->bullets_size();
  for (int i = 0; i < this->bullets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bullets(i));
  }
  
  // repeated .Epsilon5.Object objects = 3;
  total_size += 1 * this->objects_size();
  for (int i = 0; i < this->objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects(i));
  }
  
  // repeated .Epsilon5.RespPoint resp_points = 4;
  total_size += 1 * this->resp_points_size();
  for (int i = 0; i < this->resp_points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resp_points(i));
  }
  
  // repeated .Epsilon5.PlayerStat players_stat = 6;
  total_size += 1 * this->players_stat_size();
  for (int i = 0; i < this->players_stat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players_stat(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World::MergeFrom(const World& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  bullets_.MergeFrom(from.bullets_);
  objects_.MergeFrom(from.objects_);
  resp_points_.MergeFrom(from.resp_points_);
  players_stat_.MergeFrom(from.players_stat_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_packet_number()) {
      set_packet_number(from.packet_number());
    }
    if (from.has_player_info()) {
      mutable_player_info()->::Epsilon5::PlayerInfo::MergeFrom(from.player_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World::CopyFrom(const World& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  
  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  for (int i = 0; i < bullets_size(); i++) {
    if (!this->bullets(i).IsInitialized()) return false;
  }
  for (int i = 0; i < objects_size(); i++) {
    if (!this->objects(i).IsInitialized()) return false;
  }
  for (int i = 0; i < resp_points_size(); i++) {
    if (!this->resp_points(i).IsInitialized()) return false;
  }
  for (int i = 0; i < players_stat_size(); i++) {
    if (!this->players_stat(i).IsInitialized()) return false;
  }
  return true;
}

void World::Swap(World* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    bullets_.Swap(&other->bullets_);
    objects_.Swap(&other->objects_);
    resp_points_.Swap(&other->resp_points_);
    std::swap(packet_number_, other->packet_number_);
    players_stat_.Swap(&other->players_stat_);
    std::swap(player_info_, other->player_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_descriptor_;
  metadata.reflection = World_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Control_KeyStatus::kKeyUpFieldNumber;
const int Control_KeyStatus::kKeyDownFieldNumber;
const int Control_KeyStatus::kKeyLeftFieldNumber;
const int Control_KeyStatus::kKeyRightFieldNumber;
const int Control_KeyStatus::kKeyAttack1FieldNumber;
const int Control_KeyStatus::kKeyAttack2FieldNumber;
#endif  // !_MSC_VER

Control_KeyStatus::Control_KeyStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Control_KeyStatus::InitAsDefaultInstance() {
}

Control_KeyStatus::Control_KeyStatus(const Control_KeyStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Control_KeyStatus::SharedCtor() {
  _cached_size_ = 0;
  keyup_ = false;
  keydown_ = false;
  keyleft_ = false;
  keyright_ = false;
  keyattack1_ = false;
  keyattack2_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Control_KeyStatus::~Control_KeyStatus() {
  SharedDtor();
}

void Control_KeyStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Control_KeyStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Control_KeyStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Control_KeyStatus_descriptor_;
}

const Control_KeyStatus& Control_KeyStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Epsilon5_2eproto();  return *default_instance_;
}

Control_KeyStatus* Control_KeyStatus::default_instance_ = NULL;

Control_KeyStatus* Control_KeyStatus::New() const {
  return new Control_KeyStatus;
}

void Control_KeyStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    keyup_ = false;
    keydown_ = false;
    keyleft_ = false;
    keyright_ = false;
    keyattack1_ = false;
    keyattack2_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Control_KeyStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool keyUp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keyup_)));
          set_has_keyup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_keyDown;
        break;
      }
      
      // required bool keyDown = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keyDown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keydown_)));
          set_has_keydown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_keyLeft;
        break;
      }
      
      // required bool keyLeft = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keyLeft:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keyleft_)));
          set_has_keyleft();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_keyRight;
        break;
      }
      
      // required bool keyRight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keyRight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keyright_)));
          set_has_keyright();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_keyAttack1;
        break;
      }
      
      // required bool keyAttack1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keyAttack1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keyattack1_)));
          set_has_keyattack1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_keyAttack2;
        break;
      }
      
      // required bool keyAttack2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keyAttack2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keyattack2_)));
          set_has_keyattack2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Control_KeyStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool keyUp = 1;
  if (has_keyup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->keyup(), output);
  }
  
  // required bool keyDown = 2;
  if (has_keydown()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->keydown(), output);
  }
  
  // required bool keyLeft = 3;
  if (has_keyleft()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->keyleft(), output);
  }
  
  // required bool keyRight = 4;
  if (has_keyright()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->keyright(), output);
  }
  
  // required bool keyAttack1 = 5;
  if (has_keyattack1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->keyattack1(), output);
  }
  
  // required bool keyAttack2 = 6;
  if (has_keyattack2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->keyattack2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Control_KeyStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool keyUp = 1;
  if (has_keyup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->keyup(), target);
  }
  
  // required bool keyDown = 2;
  if (has_keydown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->keydown(), target);
  }
  
  // required bool keyLeft = 3;
  if (has_keyleft()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->keyleft(), target);
  }
  
  // required bool keyRight = 4;
  if (has_keyright()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->keyright(), target);
  }
  
  // required bool keyAttack1 = 5;
  if (has_keyattack1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->keyattack1(), target);
  }
  
  // required bool keyAttack2 = 6;
  if (has_keyattack2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->keyattack2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Control_KeyStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool keyUp = 1;
    if (has_keyup()) {
      total_size += 1 + 1;
    }
    
    // required bool keyDown = 2;
    if (has_keydown()) {
      total_size += 1 + 1;
    }
    
    // required bool keyLeft = 3;
    if (has_keyleft()) {
      total_size += 1 + 1;
    }
    
    // required bool keyRight = 4;
    if (has_keyright()) {
      total_size += 1 + 1;
    }
    
    // required bool keyAttack1 = 5;
    if (has_keyattack1()) {
      total_size += 1 + 1;
    }
    
    // required bool keyAttack2 = 6;
    if (has_keyattack2()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Control_KeyStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Control_KeyStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Control_KeyStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Control_KeyStatus::MergeFrom(const Control_KeyStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keyup()) {
      set_keyup(from.keyup());
    }
    if (from.has_keydown()) {
      set_keydown(from.keydown());
    }
    if (from.has_keyleft()) {
      set_keyleft(from.keyleft());
    }
    if (from.has_keyright()) {
      set_keyright(from.keyright());
    }
    if (from.has_keyattack1()) {
      set_keyattack1(from.keyattack1());
    }
    if (from.has_keyattack2()) {
      set_keyattack2(from.keyattack2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Control_KeyStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Control_KeyStatus::CopyFrom(const Control_KeyStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control_KeyStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void Control_KeyStatus::Swap(Control_KeyStatus* other) {
  if (other != this) {
    std::swap(keyup_, other->keyup_);
    std::swap(keydown_, other->keydown_);
    std::swap(keyleft_, other->keyleft_);
    std::swap(keyright_, other->keyright_);
    std::swap(keyattack1_, other->keyattack1_);
    std::swap(keyattack2_, other->keyattack2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Control_KeyStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Control_KeyStatus_descriptor_;
  metadata.reflection = Control_KeyStatus_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Control::kKeyStatusFieldNumber;
const int Control::kAngleFieldNumber;
const int Control::kWeaponFieldNumber;
const int Control::kPacketNumberFieldNumber;
const int Control::kNeedFullFieldNumber;
#endif  // !_MSC_VER

Control::Control()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Control::InitAsDefaultInstance() {
  keystatus_ = const_cast< ::Epsilon5::Control_KeyStatus*>(&::Epsilon5::Control_KeyStatus::default_instance());
}

Control::Control(const Control& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Control::SharedCtor() {
  _cached_size_ = 0;
  keystatus_ = NULL;
  angle_ = 0;
  weapon_ = 0;
  packet_number_ = 0u;
  need_full_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Control::~Control() {
  SharedDtor();
}

void Control::SharedDtor() {
  if (this != default_instance_) {
    delete keystatus_;
  }
}

void Control::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Control::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Control_descriptor_;
}

const Control& Control::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Epsilon5_2eproto();  return *default_instance_;
}

Control* Control::default_instance_ = NULL;

Control* Control::New() const {
  return new Control;
}

void Control::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_keystatus()) {
      if (keystatus_ != NULL) keystatus_->::Epsilon5::Control_KeyStatus::Clear();
    }
    angle_ = 0;
    weapon_ = 0;
    packet_number_ = 0u;
    need_full_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Control::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Epsilon5.Control.KeyStatus keyStatus = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keystatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_angle;
        break;
      }
      
      // required double angle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_weapon;
        break;
      }
      
      // required .Epsilon5.Weapon weapon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (Epsilon5::Weapon_IsValid(value)) {
            set_weapon(static_cast< Epsilon5::Weapon >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_packet_number;
        break;
      }
      
      // required uint32 packet_number = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packet_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packet_number_)));
          set_has_packet_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_need_full;
        break;
      }
      
      // optional bool need_full = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_full:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_full_)));
          set_has_need_full();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Control::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Epsilon5.Control.KeyStatus keyStatus = 1;
  if (has_keystatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->keystatus(), output);
  }
  
  // required double angle = 2;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->angle(), output);
  }
  
  // required .Epsilon5.Weapon weapon = 3;
  if (has_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->weapon(), output);
  }
  
  // required uint32 packet_number = 4;
  if (has_packet_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->packet_number(), output);
  }
  
  // optional bool need_full = 5;
  if (has_need_full()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->need_full(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Control::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Epsilon5.Control.KeyStatus keyStatus = 1;
  if (has_keystatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->keystatus(), target);
  }
  
  // required double angle = 2;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->angle(), target);
  }
  
  // required .Epsilon5.Weapon weapon = 3;
  if (has_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->weapon(), target);
  }
  
  // required uint32 packet_number = 4;
  if (has_packet_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->packet_number(), target);
  }
  
  // optional bool need_full = 5;
  if (has_need_full()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->need_full(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Control::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Epsilon5.Control.KeyStatus keyStatus = 1;
    if (has_keystatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keystatus());
    }
    
    // required double angle = 2;
    if (has_angle()) {
      total_size += 1 + 8;
    }
    
    // required .Epsilon5.Weapon weapon = 3;
    if (has_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->weapon());
    }
    
    // required uint32 packet_number = 4;
    if (has_packet_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packet_number());
    }
    
    // optional bool need_full = 5;
    if (has_need_full()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Control::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Control* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Control*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Control::MergeFrom(const Control& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keystatus()) {
      mutable_keystatus()->::Epsilon5::Control_KeyStatus::MergeFrom(from.keystatus());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_weapon()) {
      set_weapon(from.weapon());
    }
    if (from.has_packet_number()) {
      set_packet_number(from.packet_number());
    }
    if (from.has_need_full()) {
      set_need_full(from.need_full());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Control::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Control::CopyFrom(const Control& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_keystatus()) {
    if (!this->keystatus().IsInitialized()) return false;
  }
  return true;
}

void Control::Swap(Control* other) {
  if (other != this) {
    std::swap(keystatus_, other->keystatus_);
    std::swap(angle_, other->angle_);
    std::swap(weapon_, other->weapon_);
    std::swap(packet_number_, other->packet_number_);
    std::swap(need_full_, other->need_full_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Control::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Control_descriptor_;
  metadata.reflection = Control_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Auth::kNameFieldNumber;
const int Auth::kPasswordFieldNumber;
#endif  // !_MSC_VER

Auth::Auth()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Auth::InitAsDefaultInstance() {
}

Auth::Auth(const Auth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Auth::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Auth::~Auth() {
  SharedDtor();
}

void Auth::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void Auth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Auth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Auth_descriptor_;
}

const Auth& Auth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Epsilon5_2eproto();  return *default_instance_;
}

Auth* Auth::default_instance_ = NULL;

Auth* Auth::New() const {
  return new Auth;
}

void Auth::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Auth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }
      
      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Auth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Auth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Auth::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Auth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Auth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Auth::MergeFrom(const Auth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Auth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auth::CopyFrom(const Auth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auth::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Auth::Swap(Auth* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Auth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Auth_descriptor_;
  metadata.reflection = Auth_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Epsilon5

// @@protoc_insertion_point(global_scope)
